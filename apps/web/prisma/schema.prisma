// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// Enum of all possible roles with different meaning to permission
enum Role {
  USER
  /// MEMBERs are the music group's members
  MEMBER
  ADMIN
}

model User {
  // NextAuth fields (required)
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Custom fields (additionally)
  createdAt     DateTime  @default(now())
  role          Role      @default(USER)
  member        Member?

  @@index([id, email, role])
}

/// Members are people that are members to the music group, not normal users!
model Member {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  /// Role of the member within the music-group
  role      String
  image     String? // URL to the image in the S3 storage
  biography String  @db.Text

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  @@index([firstName, lastName, userId])
}

// <===> NextAuth models <===>

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
