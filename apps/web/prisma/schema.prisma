// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// Enum of all possible roles with different meaning to permission
enum Role {
  /// Guests are unauthenticated users (default role)
  GUEST
  USER
  /// MEMBERs are the music group's members
  MEMBER
  ADMIN
}

model User {
  // NextAuth fields (required)
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  member        Member?

  // Custom fields (additionally)
  createdAt DateTime @default(now())
  role      Role     @default(USER)

  blogPosts    BlogPost[]
  blogComments BlogReply[]

  /// Keeps track of when the last action (i.e. mutation) was performed.
  lastAction DateTime?

  /// Count that increments when an action was performed after another within a
  /// certain timeframe. If the count exceeds a certain threshold, this user is
  /// rate-limited. The number decreases with each action taken outside said
  /// timeframe. Some `Role`s might be immune to rate-limitations.
  actionCount Int @default(0) @db.UnsignedSmallInt

  @@index([role])
}

/// Members are people that are members to the music group, not normal users!
model Member {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  /// Role of the member within the music-group
  role      String
  image     String? // URL to the image in the S3 storage
  biography String  @db.Text

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  @@index([firstName, lastName])
}

model Gig {
  id          String   @id @default(cuid())
  title       String
  description String?
  country     String?
  city        String
  postcode    String
  street      String
  /// `start` includes date AND time of the gig
  start       DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([title, start])
  @@index([start(sort: Desc)])
}

model BlogPost {
  id      String @id @default(cuid())
  title   String
  content String @db.LongText // markdown content

  repliesDisabled Boolean @default(false)

  /// TODO field for the total amount of replies and for the (root) relative,
  ///      so that skeletons can be shown accordingly on initial load.

  /// Total (deep) reply count
  replyCount Int         @default(0) @db.UnsignedInt
  /// Total (all / deep) replies
  replies    BlogReply[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([createdAt(sort: Desc)])
  @@index([authorId])
  @@index([id, repliesDisabled])
}

model BlogReply {
  id     String   @id @default(cuid())
  blog   BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String

  content String

  parent   BlogReply? @relation("parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?

  /// Relative (direct) reply count
  replyCount Int         @default(0) @db.UnsignedInt
  /// Relative (directly nested) replies
  replies    BlogReply[] @relation("parent")

  /// Reply depth. In other words, how many parents there are (blog-post excluded).
  /// If the depth is zero, `parentId` is null
  depth Int @db.UnsignedTinyInt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([createdAt(sort: Asc)])
  @@index([blogId])
  @@index([parentId])
  @@index([authorId])
}

// <===> NextAuth models <===>

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
