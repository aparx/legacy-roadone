// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// <=====================================>
//             GENERAL MODELS
// <=====================================>

/// Enum of all possible roles with different meaning to permission
enum Role {
  /// Guests are unauthenticated users (default role)
  GUEST
  USER
  /// MEMBERs are the music group's members
  MEMBER
  ADMIN

  @@map("role")
}

model User {
  // NextAuth fields (required)
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Custom fields (additionally)
  createdAt DateTime @default(now())
  role      Role     @default(USER)

  /// Ensures authenticity of the user (if true)
  verified Boolean @default(false)

  /// Blog comments (top-level threads) created by this user.
  blogComments BlogComment[]
  /// Blog replies (nested threads) created by this user.
  blogReplies  BlogReply[]

  /// Blog posts created by this user (restricted)
  blogPosts BlogPost[]

  @@index([role])
  @@map("user")
}

/// Members are people that are members to the music group, not normal users!
model Member {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  /// Role of the member within the music-group
  role      String
  image     String? // URL to the image in the S3 storage
  // biography String? @db.Text

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([firstName, lastName])
  @@map("member")
}

model Gig {
  id          String   @id @default(cuid())
  title       String
  description String?
  country     String
  city        String
  postcode    String
  street      String
  /// `start` includes date AND time of the gig
  start       DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, start])
  @@index(start(sort: Desc))
  @@map("gig")
}

model Song {
  id     String @id @default(cuid())
  name   String
  artist String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, artist])
  @@index(artist(sort: Asc))
  @@map("song")
}

model MediaGroup {
  id          String  @id @default(cuid())
  title       String  @db.TinyText
  description String?

  /// If true, the group will appear at the top on the media page (ASC)
  pinned Boolean @default(false)

  items MediaItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(createdAt(orderBy: Desc))
  @@index(pinned)
}

model MediaItem {
  id       String  @id @default(cuid())
  /// Mimetype of the actual target file, if given at all
  mimetype String?

  /// The name of the item (i.e. alt for images)
  name String?

  /// Optional URL that leads to the item using a public link and is optional.
  /// It is strongly advised *against* putting the S3 URL here, since the bucket or
  /// URL reference may change during the lifespan of a media-item.
  url String? @unique

  /// The type of the media item that ensures its mimetype as well
  type MediaItemType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   MediaGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId String?

  @@index([groupId, type])
  @@index(createdAt(sort: Desc))
}

enum MediaItemType {
  AUDIO
  IMAGE
  VIDEO
}

enum EventType {
  SONG
  BLOG
  GIG
}

/// An event is a sort of log of the most current content posted.
/// This type of event is (...for example...) shown on the front-page.
model Event {
  id String @id @default(cuid())

  updatedAt DateTime @default(now()) @updatedAt

  /// The referenced item identifier (if it has an identifier, otherwise random)
  refId   String    @default(cuid())
  type    EventType
  title   String
  content String

  @@unique([refId, type])
  @@index(updatedAt(sort: Desc))
}

// <=====================================>
//           BLOG RELATED MODELS
// <=====================================>

model BlogPost {
  id        String   @id @default(cuid())
  title     String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// If true no one will be able to comment anymore
  commentsDisabled Boolean @default(false)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  replies  BlogReply[]
  comments BlogComment[]

  @@index(authorId)
  @@index(createdAt(sort: Desc))
  @@map("blog_post")
}

/// Comments are top level replies to a blog post
model BlogComment {
  // BEGIN SHARED FIELDS (equal to `BlogReply` [!])
  id        String   @id @default(cuid())
  content   String   @db.TinyText // ::= 255
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  blog   BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
  // END SHARED FIELDS

  replies BlogReply[]

  // Forces limitation of up to one top-level thread per author per blog post
  @@unique([blogId, authorId])
  @@index(authorId)
  @@index(createdAt(sort: Desc))
  @@map("blog_comment")
}

/// Replies are comments that continue a `BlogComment` and are thus nested.
model BlogReply {
  // BEGIN SHARED FIELDS (equal to `BlogComment` [!])
  id        String   @id @default(cuid())
  content   String   @db.TinyText // ::= 255
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  blog   BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
  // END SHARED FIELDS

  parent   BlogComment @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String

  // (blogId), (blogId, parentId), (blogId, parentId, authorId)
  @@index([blogId, parentId, authorId])
  @@index(authorId)
  @@index(parentId)
  @@index(createdAt(sort: Asc))
  @@map("blog_reply")
}

// <=====================================>
//        NEXT-AUTH SPECIFIC MODELS
// <=====================================>

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index(userId)
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
